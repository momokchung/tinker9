OUTPUT_DIR: src/cu/amoeba
KERNEL_NAME: sparsePrecondgk_cu1
# TEMPLATE_PARAMS:
# CONSTEXPR_FLAGS:

# COUNT:
# ENERGY:
# VIRIAL:
# GRADIENT:

# CUT_DISTANCE:
OFF_DISTANCE: 'off'

EXCLUDE_INFO: uinfo
SCALE_1X_TYPE: real_const_array

EXTRA_PARAMS: |
  , const real (*restrict rsd)[3], const real (*restrict rsdp)[3]
  , real (*restrict zrsd)[3], real (*restrict zrsdp)[3], const real* restrict polarity
IMPLICIT_PARAMS:
  - d::jpolar
  - d::njpolar
  - d::pdamp
  - d::thlval

I_VARIABLES:
  - register real xi   from:x
  - register real yi   from:y
  - register real zi   from:z
  - shared   real uidx from:rsd,0
  - shared   real uidy from:rsd,1
  - shared   real uidz from:rsd,2
  - shared   real uipx from:rsdp,0
  - shared   real uipy from:rsdp,1
  - shared   real uipz from:rsdp,2
  - shared   real pdi  from:pdamp
  - shared   int  jpi  from:jpolar
  - shared   real poli from:polarity
K_VARIABLES:
  - register real xk   from:x
  - register real yk   from:y
  - register real zk   from:z
  - register real ukdx from:rsd,0
  - register real ukdy from:rsd,1
  - register real ukdz from:rsd,2
  - register real ukpx from:rsdp,0
  - register real ukpy from:rsdp,1
  - register real ukpz from:rsdp,2
  - register real pdk  from:pdamp
  - register int  jpk  from:jpolar
  - register real polk from:polarity
I_FORCE:
  - register real fidx addto:zrsd,0
  - register real fidy addto:zrsd,1
  - register real fidz addto:zrsd,2
  - register real fipx addto:zrsdp,0
  - register real fipy addto:zrsdp,1
  - register real fipz addto:zrsdp,2
K_FORCE:
  - register real fkdx addto:zrsd,0
  - register real fkdy addto:zrsd,1
  - register real fkdz addto:zrsd,2
  - register real fkpx addto:zrsdp,0
  - register real fkpy addto:zrsdp,1
  - register real fkpz addto:zrsdp,2

# SCALED_PAIRWISE_INTERACTION:
FULL_PAIRWISE_INTERACTION: |
  real xr = @xk@ - @xi@;
  real yr = @yk@ - @yi@;
  real zr = @zk@ - @zi@;
  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real r = REAL_SQRT(r2);
    real scale3, scale5;
    real pga = thlval[njpolar * jpi[klane] + jpk];
    damp_thole2(r, @pdi@, pga, @pdk@, pga, scale3, scale5);
    scale3 *= scalea;
    scale5 *= scalea;
    real polik = @poli@ * @polk@;
    real rr3 = scale3 * polik * REAL_RECIP(r * r2);
    real rr5 = 3 * scale5 * polik * REAL_RECIP(r * r2 * r2);


    real c;
    c = rr5 * dot3(xr, yr, zr, ukdx, ukdy, ukdz);
    @fidx@ += c * xr - rr3 * @ukdx@;
    @fidz@ += c * zr - rr3 * @ukdz@;
    @fidy@ += c * yr - rr3 * @ukdy@;


    c = rr5 * dot3(xr, yr, zr, ukpx, ukpy, ukpz);
    @fipx@ += c * xr - rr3 * @ukpx@;
    @fipy@ += c * yr - rr3 * @ukpy@;
    @fipz@ += c * zr - rr3 * @ukpz@;


    c = rr5 * dot3(xr, yr, zr, @uidx@, @uidy@, @uidz@);
    @fkdx@ += c * xr - rr3 * @uidx@;
    @fkdy@ += c * yr - rr3 * @uidy@;
    @fkdz@ += c * zr - rr3 * @uidz@;


    c = rr5 * dot3(xr, yr, zr, @uipx@, @uipy@, @uipz@);
    @fkpx@ += c * xr - rr3 * @uipx@;
    @fkpy@ += c * yr - rr3 * @uipy@;
    @fkpz@ += c * zr - rr3 * @uipz@;
  } // end if (include)
