OUTPUT_DIR: src/cu/solv
KERNEL_NAME: grycuk1_cu1
TEMPLATE_PARAMS: template<class Ver>
CONSTEXPR_FLAGS: |
  constexpr bool do_v = Ver::v;
  constexpr bool do_g = Ver::g;
# USE_NEIGH:

# COUNT:
#   - nes
VIRIAL:
  - vs
GRADIENT:
  - gx
  - gy
  - gz

EXTRA_PARAMS: |
  , real descoff
  , real pi43
  , real factor
  , bool useneck
  , bool usetanh
  , const real* restrict rsolv
  , const real* restrict rdescr
  , const real* restrict shct
  , const real* restrict rborn
  , const real* restrict drb
  , const real* restrict drbp
  , const real* restrict aneck
  , const real* restrict bneck
  , const real* restrict rneck
  , const real* restrict sneck
  , const real* restrict bornint
  , bool use_gk

I_VARIABLES:
  - shared real xi     from:x
  - shared real yi     from:y
  - shared real zi     from:z
  - shared real rsi    from:rsolv
  - shared real rdi    from:rdescr
  - shared real shcti  from:shct
  - shared real rbi    from:rborn
  - shared real drbi   from:drb
  - shared real drbpi  from:drbp
  - shared real snecki from:sneck
  - shared real borni  from:bornint
K_VARIABLES:
  - shared real xk       from:x
  - shared real yk       from:y
  - shared real zk       from:z
  - register real rsk    from:rsolv
  - register real rdk    from:rdescr
  - register real shctk  from:shct
  - register real rbk    from:rborn
  - register real drbk   from:drb
  - register real drbpk  from:drbp
  - register real sneckk from:sneck
  - register real bornk  from:bornint
I_FORCE:
  - register real gxi addto:gx
  - register real gyi addto:gy
  - register real gzi addto:gz
K_FORCE:
  - register real gxk addto:gx
  - register real gyk addto:gy
  - register real gzk addto:gz

FULL_PAIRWISE_INTERACTION: |
  real xr = @xk@ - @xi@;
  real yr = @yk@ - @yi@;
  real zr = @zk@ - @zi@;
  real r2 = xr*xr + yr*yr + zr*zr;
  if (incl) {
    real r = REAL_SQRT(r2);
    real ri = REAL_MAX(@rsi@,@rdi@) + descoff;
    real si = @rdi@ * @shcti@;
    real rbir = @rbi@;
    real rbi3 = rbir*rbir*rbir;
    real termi = pi43 / rbi3;
    termi = factor / REAL_POW(termi, (real)4/3);
    real mixsn = (real)0.5 * (@snecki@ + @sneckk@);
    real rk = REAL_MAX(@rsk@,@rdk@) + descoff;
    real sk = @rdk@ * @shctk@;
    real rbkr = @rbk@;
    real rbk3 = rbkr*rbkr*rbkr;
    real termk = pi43 / rbk3;
    termk = factor / REAL_POW(termk, (real)4/3);
    if (usetanh) {
      real tcr;
      tanhrscchr (@borni@,@rsi@,tcr,pi43);
      termi = termi * tcr;
      tanhrscchr (@bornk@,@rsk@,tcr,pi43);
      termk = termk * tcr;
    }
    bool computei = (@rsi@ > 0) and (@rdk@ > 0) and (sk > 0);
    bool computek = (@rsk@ > 0) and (@rdi@ > 0) and (si > 0);
    real dei = 0;
    real dek = 0;
    if (computei) {
      pair_dgrycuk(r, r2, ri, @rdk@, sk, mixsn, pi43, @drbi@, @drbpi@, termi, use_gk, useneck, aneck, bneck, rneck, dei);
    }
    if (computek) {
      pair_dgrycuk(r, r2, rk, @rdi@, si, mixsn, pi43, @drbk@, @drbpk@, termk, use_gk, useneck, aneck, bneck, rneck, dek);
    }
    real de = dei + dek;
    real dedx = de * xr;
    real dedy = de * yr;
    real dedz = de * zr;
    if CONSTEXPR (do_g) {
      @gxi@ += dedx;
      @gyi@ += dedy;
      @gzi@ += dedz;
      @gxk@ -= dedx;
      @gyk@ -= dedy;
      @gzk@ -= dedz;
    }
    if CONSTEXPR (do_v) {
      vstlxx += floatTo<vbuf_prec>(xr * dedx);
      vstlyx += floatTo<vbuf_prec>(yr * dedx);
      vstlzx += floatTo<vbuf_prec>(zr * dedx);
      vstlyy += floatTo<vbuf_prec>(yr * dedy);
      vstlzy += floatTo<vbuf_prec>(zr * dedy);
      vstlzz += floatTo<vbuf_prec>(zr * dedz);
    }
  }
