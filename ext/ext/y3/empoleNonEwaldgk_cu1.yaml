OUTPUT_DIR: src/cu/solv
KERNEL_NAME: empoleNonEwaldgk_cu1
TEMPLATE_PARAMS: template<class Ver>
CONSTEXPR_FLAGS: |
  constexpr bool do_e = Ver::e;
  constexpr bool do_a = Ver::a;
  constexpr bool do_g = Ver::g;
  constexpr bool do_v = Ver::v;

COUNT:
  - nem
ENERGY:
  - em
VIRIAL:
  - vem
GRADIENT:
  - gx
  - gy
  - gz

# CUT_DISTANCE:
OFF_DISTANCE: 'off'

EXCLUDE_INFO: mdpuinfo
SCALE_1X_TYPE: real4_const_array,0

EXTRA_PARAMS: |
  , real* restrict trqx, real* restrict trqy, real* restrict trqz
  , const real (*restrict rpole)[10]
  , real f
# IMPLICIT_PARAMS:

I_VARIABLES:
  - shared real xi   from:x
  - shared real yi   from:y
  - shared real zi   from:z
  - shared real ci   from:rpole,MPL_PME_0
  - shared real dix  from:rpole,MPL_PME_X
  - shared real diy  from:rpole,MPL_PME_Y
  - shared real diz  from:rpole,MPL_PME_Z
  - shared real qixx from:rpole,MPL_PME_XX
  - shared real qixy from:rpole,MPL_PME_XY
  - shared real qixz from:rpole,MPL_PME_XZ
  - shared real qiyy from:rpole,MPL_PME_YY
  - shared real qiyz from:rpole,MPL_PME_YZ
  - shared real qizz from:rpole,MPL_PME_ZZ
K_VARIABLES:
  - shared   real xk   from:x
  - shared   real yk   from:y
  - shared   real zk   from:z
  - shared   real ck   from:rpole,MPL_PME_0
  - shared   real dkx  from:rpole,MPL_PME_X
  - shared   real dky  from:rpole,MPL_PME_Y
  - shared   real dkz  from:rpole,MPL_PME_Z
  - register real qkxx from:rpole,MPL_PME_XX
  - register real qkxy from:rpole,MPL_PME_XY
  - register real qkxz from:rpole,MPL_PME_XZ
  - register real qkyy from:rpole,MPL_PME_YY
  - register real qkyz from:rpole,MPL_PME_YZ
  - register real qkzz from:rpole,MPL_PME_ZZ
I_FORCE:
  - register real frcxi addto:gx
  - register real frcyi addto:gy
  - register real frczi addto:gz
  - register real trqxi addto:trqx
  - register real trqyi addto:trqy
  - register real trqzi addto:trqz
K_FORCE:
  - register real frcxk addto:gx
  - register real frcyk addto:gy
  - register real frczk addto:gz
  - register real trqxk addto:trqx
  - register real trqyk addto:trqy
  - register real trqzk addto:trqz

SCALED_PAIRWISE_INTERACTION: |
  real xr = @xk@ - @xi@;
  real yr = @yk@ - @yi@;
  real zr = @zk@ - @zi@;
  real r2 = xr*xr + yr*yr + zr*zr;
  if (r2 <= off * off and incl) {
    real e, vxx, vyx, vzx, vyy, vzy, vzz;
    real aewald = 0;
    pair_mpole_v2<Ver, NON_EWALD>(
      r2, xr, yr, zr, scalea,
      @ci@, @dix@, @diy@, @diz@, @qixx@, @qixy@, @qixz@, @qiyy@, @qiyz@, @qizz@,
      @ck@, @dkx@, @dky@, @dkz@, @qkxx@, @qkxy@, @qkxz@, @qkyy@, @qkyz@, @qkzz@,
      f, aewald,
      @frcxi@, @frcyi@, @frczi@, @frcxk@, @frcyk@, @frczk@,
      @trqxi@, @trqyi@, @trqzi@, @trqxk@, @trqyk@, @trqzk@,
      e, vxx, vyx, vzx, vyy, vzy, vzz);
    if CONSTEXPR (do_e) {
      emtl += floatTo<ebuf_prec>(e);
      if CONSTEXPR (do_a) {
        if (scalea != 0 and e != 0)
          nemtl += 1;
      }
    }
    if CONSTEXPR (do_v) {
      vemtlxx += floatTo<vbuf_prec>(vxx);
      vemtlyx += floatTo<vbuf_prec>(vyx);
      vemtlzx += floatTo<vbuf_prec>(vzx);
      vemtlyy += floatTo<vbuf_prec>(vyy);
      vemtlzy += floatTo<vbuf_prec>(vzy);
      vemtlzz += floatTo<vbuf_prec>(vzz);
    }
  } // end if (include)
FULL_PAIRWISE_INTERACTION: |
  real xr = @xk@ - @xi@;
  real yr = @yk@ - @yi@;
  real zr = @zk@ - @zi@;
  real r2 = xr*xr + yr*yr + zr*zr;
  if (r2 <= off * off and incl) {
    real e, vxx, vyx, vzx, vyy, vzy, vzz;
    real aewald = 0;
    pair_mpole_v2<Ver, NON_EWALD>(
      r2, xr, yr, zr, 1,
      @ci@, @dix@, @diy@, @diz@, @qixx@, @qixy@, @qixz@, @qiyy@, @qiyz@, @qizz@,
      @ck@, @dkx@, @dky@, @dkz@, @qkxx@, @qkxy@, @qkxz@, @qkyy@, @qkyz@, @qkzz@,
      f, aewald,
      @frcxi@, @frcyi@, @frczi@, @frcxk@, @frcyk@, @frczk@,
      @trqxi@, @trqyi@, @trqzi@, @trqxk@, @trqyk@, @trqzk@,
      e, vxx, vyx, vzx, vyy, vzy, vzz);
    if CONSTEXPR (do_e) {
      emtl += floatTo<ebuf_prec>(e);
      if CONSTEXPR (do_a) {
        if (e != 0)
          nemtl += 1;
      }
    }
    if CONSTEXPR (do_v) {
      vemtlxx += floatTo<vbuf_prec>(vxx);
      vemtlyx += floatTo<vbuf_prec>(vyx);
      vemtlzx += floatTo<vbuf_prec>(vzx);
      vemtlyy += floatTo<vbuf_prec>(vyy);
      vemtlzy += floatTo<vbuf_prec>(vzy);
      vemtlzz += floatTo<vbuf_prec>(vzz);
    }
  } // end if (include)
